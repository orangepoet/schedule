using System;
using System.Data;
using System.Collections.Generic;

using Ctrip.Mobile.Server.SmartTrip.Common.Utility;
using Ctrip.Mobile.Server.SmartTrip.Common.Error;
using System.Diagnostics;

namespace namespace Ctrip.Mobile.Server.SmartTrip.MessageProcessJobws.Repository
{
    public sealed class FavoritePOINotifyLogEntity
    {
        public long FavoritePOINotifyLogId { get; set; }
        public long FavoriteId { get; set; }
        public string UID { get; set; }
        public int ActionType { get; set; }
        public string CLogId { get; set; }
        public DateTime DataChange_LastTime { get; set; }
        public DateTime DataChange_CreateTime { get; set; }
        
    }
    public static class FavoritePOINotifyLogRepository
    {
        public static IList<FavoritePOINotifyLogEntity> QueryAll()
        {
            List<FavoritePOINotifyLogEntity> result;
            DataSet dsSmartTrip;

            result = new List<FavoritePOINotifyLogEntity>();
            try
            {
                dsSmartTrip = SmartTripDBAccessManager.SmartTripDB.ExecuteDataSet(
                        "Select_All_FavoritePOINotifyLog",
                        CommandType.Text,
                        c_Select_All_FavoritePOINotifyLog,
                        null);

                if (DataTableHelper.HasRow(dsSmartTrip))
                {
                    foreach (DataRow row in dsSmartTrip.Tables[0].Rows)
                    {
                        if (row != null)
                        {
                            result.Add(ToEntity(row));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new ServiceException(ServiceErrorCode.DBUnknowError, ServiceErrorMessage.DBUnknowError, ex);
            }
            return result;
        }

        public static FavoritePOINotifyLogEntity Query(long FavoritePOINotifyLogId)
        {
            if(FavoritePOINotifyLogId <= 0)
            {
                throw new ArgumentOutOfRangeException("FavoritePOINotifyLogId");
            }

            DataParameterCollection parameter;
            DataSet ds;

            parameter = new DataParameterCollection();
            parameter.Add("FavoritePOINotifyLogId", DbType.Int64, FavoritePOINotifyLogId);
            try
            {
                ds = SmartTripDBAccessManager.SmartTripDB.ExecuteDataSet(
                        "Select_FavoritePOINotifyLog_ById",
                        CommandType.Text,
                        c_Select_All_FavoritePOINotifyLog_ById,
                        parameter);

                if (DataTableHelper.HasRow(ds))
                {
                    return ToEntity(ds.Tables[0].Rows[0]);
                }
            }
            catch (Exception ex)
            {
                throw new ServiceException(ServiceErrorCode.DBUnknowError, ServiceErrorMessage.DBUnknowError, ex);
            }
            return null;
        }

        public static long Insert(FavoritePOINotifyLogEntity entity)
        {
            if(entity==null)
            {
                throw new ArgumentNullException("entity");
            }

            DataParameterCollection parameters;

            parameters = new DataParameterCollection();
            
            parameters.Add("FavoritePOINotifyLogId", DbType.Int64, ParameterDirection.Output, /*value*/ null, /*size*/ 0);
            parameters.Add("FavoriteId", DbType.Int64, entity.FavoriteId);
            parameters.Add("UID", DbType.String, entity.UID);
            parameters.Add("ActionType", DbType.Int16, entity.ActionType);
            parameters.Add("CLogId", DbType.String, entity.CLogId);
            parameters.Add("DataChange_LastTime", DbType.DateTime, entity.DataChange_LastTime);
            parameters.Add("DataChange_CreateTime", DbType.DateTime, entity.DataChange_CreateTime);
            

            SmartTripDBAccessManager.SmartTripDB.ExecuteNonQuery(
                c_sqlInsert /*sqlName*/,
                CommandType.StoredProcedure,
                c_sqlInsert /*sqlCommand*/,
                parameters);

            return DbConvertor.ConvertToType<long>(parameters["FavoritePOINotifyLogId"].Value);
        }

        public static void Update(FavoritePOINotifyLogEntity entity)
        {
            if(entity==null)
            {
                throw new ArgumentNullException("entity");
            }

            DataParameterCollection parameters;

            parameters = new DataParameterCollection();
            parameters.Add("FavoritePOINotifyLogId", DbType.Int64, entity.FavoritePOINotifyLogId);
            parameters.Add("FavoriteId", DbType.Int64, entity.FavoriteId);
            parameters.Add("UID", DbType.String, entity.UID);
            parameters.Add("ActionType", DbType.Int16, entity.ActionType);
            parameters.Add("CLogId", DbType.String, entity.CLogId);
            parameters.Add("DataChange_LastTime", DbType.DateTime, entity.DataChange_LastTime);
            parameters.Add("DataChange_CreateTime", DbType.DateTime, entity.DataChange_CreateTime);
            

            SmartTripDBAccessManager.SmartTripDB.ExecuteNonQuery(
                c_sqlUpdate /*sqlName*/,
                CommandType.StoredProcedure,
                c_sqlUpdate /*sqlCommand*/,
                parameters);
        }

        private static FavoritePOINotifyLogEntity ToEntity(DataRow row)
        {
            Debug.Assert(row != null);

            return new FavoritePOINotifyLogEntity
            {
                FavoritePOINotifyLogId =  DbConvertor.ConvertToType<long>(row["FavoritePOINotifyLogId"]),
                FavoriteId =  DbConvertor.ConvertToType<long>(row["FavoriteId"]),
                UID =  DbConvertor.ConvertToType<string>(row["UID"]),
                ActionType =  DbConvertor.ConvertToType<int>(row["ActionType"]),
                CLogId =  DbConvertor.ConvertToType<string>(row["CLogId"]),
                DataChange_LastTime =  DbConvertor.ConvertToType<DateTime>(row["DataChange_LastTime"]),
                DataChange_CreateTime =  DbConvertor.ConvertToType<DateTime>(row["DataChange_CreateTime"]),
                
            };
        }

        private const string c_Select_All_FavoritePOINotifyLog = @"
SELECT
    [FavoritePOINotifyLogId],
    [FavoriteId],
    [UID],
    [ActionType],
    [CLogId],
    [DataChange_LastTime],
    [DataChange_CreateTime]
FROM [FavoritePOINotifyLog] WITH(NOLOCK)
";

        private const string c_Select_All_FavoritePOINotifyLog_ById = @"
SELECT
    [FavoritePOINotifyLogId],
    [FavoriteId],
    [UID],
    [ActionType],
    [CLogId],
    [DataChange_LastTime],
    [DataChange_CreateTime]
FROM [FavoritePOINotifyLog] WITH(NOLOCK)
WHERE [FavoritePOINotifyLogId]=@FavoritePOINotifyLogId
";

        private const string c_sqlInsert = "sp3_FavoritePOINotifyLog_i";
        private const string c_sqlUpdate = "sp3_FavoritePOINotifyLog_u";
    }
}